<div class="container">

    <div class="row">
    <div class="col-md-9" role="main">
        <img src="/img/notificationCenterExt2.png" class="img-responsive">
        <span class="anchor" id="what-is-included"></span>
        <h2>What is included</h2>

      <p>
        <div class="container">
        <div class="row">
        <div class="col-md-9" role="main">
        <span class="anchor" id="ajax"></span>
        <h3><?= $this->translate('AJAX') ?></h3>
        <p><?= sprintf($this->translate("The AJAX components are the heart of the WasabiLib. They allow the manipulation of a website in every way very easy and convenient right within the PHP code. To realize the functionality of the AJAX mechanism there are several PHP and JavaScript classes working together to manipulate the DOM. The PHP and JavaScript (JS) components communicate over a notification center written in JS. Therefor an AJAX-PHP class represents a notification or AJAX message type which will be evaluated on the JS side. The received AJAX message will be transported to all JS-AJAX objects which has been registered to the notification center for that kind of message before. This approach allows the developer to extend the number of possible AJAX message types very easily. For more informations on how to extend the WasibiLib take a look at %sHow to extend WasabiLib Module%s. For example if one wants to fill a container of the user website with new content. Then the developer will use a PHP class called InnerHtml. After filling in all required parameters, the message can be send to the user. After receiving the message the JS class InnerHtml will be notified about this message, because this class has been registered for InnerHtml events before. There the action will be performed and the received HTML snippet will be filled in the specified container. Below the different components will be discussed."), '<a href="#how-to-extend">', '</a>')?></p>

        <p><?= sprintf($this->translate("Note: Initiating an AJAX request with the WasabiLib is very is easy. The only thing to do is set an unique id, a css class called 'ajax_element', an action encapsulated in a html5 attribute and any number of parameters encapsulated in a JSON string to the HTML element. The example below shows an example of a HTML button."))?></p>

        <div class="highlight"><pre>
        &lt;button id="ajax_btn" class="ajax_element" data-href="useAjaxButton" data-json='{"name":"wasabiLib", "task":"test ajax button"}'&gt;
            Button
        &lt;/button&gt;
    </pre></div>

        <span class="anchor" id="ResponseTypeResponseConfigurator"></span>
        <h3><?= sprintf($this->translate("ResponseType and ResponseConfigurator"))?></h3>
        <p><?= sprintf($this->translate("<i>ResponseType</i> and <i>ResponseConfigurator</i> are the PHP base classes to standardize the processing of an AJAX response. All AJAX classes should be derived from one of those classes."))?></p>

        <h4 id="ResponseType"><?= sprintf($this->translate("ResponseType"))?></h4>
        <p><?= sprintf($this->translate("A <i>ResponseType</i> encapsulate the structure of an AJAX response and provides two methods. The first method is the <i>message()</i> method. It returns an array with a <i>css selector</i>, an <i>actionType</i> and a <i>params</i> in a standardized array. The second method is the <i>toArray()</i> method. It encapsulate the data from the <i>message()</i> method in an array with additional metadata like the <i>eventType</i> and the <i>status</i> of a message. To implement a class derived from the abstract ResponseType one has to implement the <i>message()</i> method. This method defines the information which has to be send to the user side to be processed. A simple example to derive a <i>ResponseType</i> is given in the examples section. It shows how the <i>ConsoleLog</i> class is implemented."))?></p>

        <h4 id="JavaScript_recipient"><?= sprintf($this->translate("JavaScript recipient"))?></h4>
        <p><?= sprintf($this->translate("To a specialized <i>ResponseType</i> belongs a recipient on the JS side which will process the data received from the server, e.g. hide an element on the website. The recipient has to implement the <i>update(responseType)</i> method and the recipient should be registered to the notification center (take a look at WasabiLib\wasabilib_assets\js\WasabiLib\Recipients\config.js.). The <i>update(responseType)</i> method of a recipient class is called every time the notification center receive a message with an event type the recipient was registered before. Below one can see an example for the <i>ConsoleLog</i> class."))?></p>

        <div class="highlight"><pre>
        <code class="language-php">
            class ConsoleLog extends ResponseType{
                private $varExport;

                public function __construct($whatToLog){
                    $this->varExport = var_export($whatToLog, true) ;
                    $this->setEventName("consoleLog");
                }

                public function message() {
                    return "*************  wasabiLib Ajax Console Log   ******************
                    ".$this->varExport."\n************************************************************";
                    }
                }

                public function consoleLogAction() {
                $consoleLog = new ConsoleLog(get_class($this));

                $response = new Response();
                $response->add($consoleLog);

                return $this->getResponse()->setContent($response);
            }
        </code>
    </pre></div>

    <pre>
        <code class="language-javascript">
            function ConsoleLog(){

            }

            ConsoleLog.prototype.update = function(responseType){
                console.log(responseType.message);
            }

            // register the recipient.
            websiteManager.getwasabiNotificationCenter().register("consoleLog","ConsoleLog", new ConsoleLog());
        </code>
    </pre>

        <h4 id="ResponseConfigurator"><?= sprintf($this->translate("ResponseConfigurator"))?></h4>
        <p><?= sprintf($this->translate("The <i>ResponseConfigurator</i> groups any number of <i>ResponseType</i> classes and their configuration. Therefor the class provides the methods <i>getResponseTypes()</i>, which returns all configured <i>ResponseType</i> classes in an array, and the <i>configure()</i>, which has to be reimplemented and used to initialize and configure any number of <i>ResponseType</i> classes. To put <i>ResponseType</i> classes into the mentioned array the <i>ResponseConfigurator</i> class provides a method called <i>addResponseType(\$responseType)</i>. Assume one wants to replace the content of an Html element and wants to notify the user about the adding. Below one can see an example on how to use a derived <i>ResponseConfigurator</i> and the later mentioned classes <i>InnerHtml</i> and <i>GritterMessage</i> for this task."))?></p>
        <div class="highlight"><pre>
        <code class="language-php">
            class ExampleResponseConfigurator extends ResponseConfigurator{
                public function configure() {
                    $content = "&lt;p&gt;Content to be inserted.&lt;/p&gt;";
                    $message = new InnerHtml("#rcwod_id", $content);
                    $shortMessage = new GritterMessage("A new HTML element has appeared!", "New Element");
                    $shortMessage->setType(GritterMessage::TYPE_ALERT);

                    $this->addResponseType($message);
                    $this->addResponseType($short);
                }
            }

            public function derivedResponseConfiguratorAction() {
                $exampleResponseConfig = new ExampleResponseConfigurator();

                $response = new Response();
                $response->add($exampleResponseConfig);

                return $this->getResponse()->setContent($response);
            }
        </code>
    </pre></div>

        <p><?= sprintf($this->translate("If one wants to use this many times, one can derive a new class from the ResponseConfigurator class."))?></p>

        <span class="anchor" id="genericMessage"></span>
        <h3><?= sprintf($this->translate("GenericMessage"))?></h3>
        <p><?= sprintf($this->translate("To transport an AJAX message to the user side one should use the <i>GenericMessage</i> class which is a subclass of <i>ResponseType</i>. This class receives parameters and is sent to the website to be processed from the JS code. To send a valid message one have to set the following parameters:"))?></p>

        <ul>
            <li><?= sprintf($this->translate("a css selector to identify any html element that is affected by the <i>AJAX</i> response (For more please check out corresponding literature)"))?></li>
            <li><?= sprintf($this->translate("a so called action type which specifies the kind of action to be processed"))?></li>
            <li><?= sprintf($this->translate("an event type which determines which objects process the message"))?></li>
            <li><?= sprintf($this->translate("a params array to transport needed parameters to the JS side"))?></li>
        </ul>

        <span class="anchor" id="response"></span>
        <h3><?= sprintf($this->translate("Response"))?></h3>
        <p><?= sprintf($this->translate("Now a messages can be built, but the messages must also be send to the user side. To transport the AJAX messages to the user side one use the <i>Response</i> class. This class receive any number of AJAX messages over the <i>add(\$message)</i> method. It can take objects of type <i>ResponseType</i> or <i>ResponseConfigurator</i> and groups them to a message stream. This stream will be transported to the user website as a <i>JSON</i> string. Examples how to use the Response class can be found in the other examples in this documentation."))?></p>

        <div class="highlight"><pre>
        <code class="language-php">
            public function responseAction() {
                // Any class with type GenericMessage or ResponseConfigurator or subclasses
                $message = new GenericMessage("#id", "ACTION_TYPE_REPLACE", "innerHtml", "Replacement of the content.");

                $response = new Response();
                $response->add($message);

                return $this->getResponse()->setContent($response);
            }
        </code>
    </pre></div>

        <span class="anchor" id="InnerHtml"></span>
        <h3><?= sprintf($this->translate("InnerHtml"))?></h3>
        <p><?= sprintf($this->translate("The InnerHtml class is a subclass of <i>GenericMessage</i> and can be used to add or append an element to the DOM or to remove an element from the DOM. For usage of this class one passes through four partly optional parameter."))?></p>

        <ul>
            <li><?= sprintf($this->translate("a css selector"))?></li>
            <li><?= sprintf($this->translate("an optional action type: Possible values are <i>ACTION_TYPE_REPLACE</i> (default), <i>ACTION_TYPE_APPEND</i> and <i>ACTION_TYPE_REMOVE</i>"))?></li>
            <li><?= sprintf($this->translate("the content if one wants to replace or append an element to the dom (null if action type is <i>ACTION_TYPE_REMOVE</i>"))?></li>
            <li><?= sprintf($this->translate("an optional PhpRenderer if one wants to use the InnerHtml class with a ZF2 ViewModel."))?></li>
        </ul>

        <p><?= sprintf($this->translate("Below several examples illustrate the usage of the InnerHtml class."))?></p>

        <div class="highlight">
        <pre>
            <code class="language-php">
                public function innerHtmlReplaceAction() {
                    $innerHtml = new InnerHtml("#inner_html_id1", "Replacement of the content.");

                    $response = new Response();
                    $response->add($innerHtml);

                    return $this->getResponse()->setContent($response);
                }
            </code>
        </pre>
        </div>

        <div class="highlight">
        <pre>
            <code class="language-php">
                public function innerHtmlRemoveAction() {
                    $innerHtml = new InnerHtml("#inner_html_id2", null, "ACTION_TYPE_REMOVE");

                    $response = new Response();
                    $response->add($innerHtml);

                    return $this->getResponse()->setContent($response);
                }
            </code>
        </pre>
        </div>

        <div class="highlight">
        <pre>
            <code class="language-php">
                public function innerHtmlAppendAction() {
                    $innerHtml = new InnerHtml("#inner_html_id3", "Append me", "ACTION_TYPE_APPEND");

                    $response = new Response();
                    $response->add($innerHtml);

                    return $this->getResponse()->setContent($response);
                }
            </code>
        </pre>
        </div>

        <span class="anchor" id="DomManipulator"></span>
        <h3><?= sprintf($this->translate("DomManipulator"))?></h3>
        <p><?= sprintf($this->translate("The DomManipulator class is alse a subclass of <i>GenericMessage</i> and can be used to change the attributes of existing elements in the DOM. For usage of this class one passes through four partly optional parameter."))?></p>

        <ul>
            <li><?= sprintf($this->translate("The css selector"))?></li>
            <li><?= sprintf($this->translate("A property name, e.g. 'background-color'."))?></li>
            <li><?= sprintf($this->translate("A value, e.g. '#ffffff'."))?></li>
            <li><?= sprintf($this->translate("The optional action type, e.g. ACTION_TYPE_CSS (default), ACTION_TYPE_SLIDEDOWN, ACTION_TYPE_FADEOUT, ACTION_TYPE_FADEIN, ACTION_TYPE_ATTR, ACTION_TYPE_MODAL, ACTION_TYPE_ADD_CLASS, ACTION_TYPE_REMOVE_CLASS or ACTION_TYPE_SHOW."))?></li>
        </ul>

        <p><?= sprintf($this->translate("Below the example illustrate how to use the <i>DomManipulator</i> class to change the background color of an element, where for that purpose the default action type <i>ACTION_TYPE_CSS</i> is used."))?></p>

        <div class="highlight">
        <pre>
            <code class="language-php">
        public function domManipulatorBackgroundColorAction() {
            $domManipulator = new DomManipulator("#id", "background-color", "#ffffff");

            $response = new Response();
            $response->add($domManipulator);

            return $this->getResponse()->setContent($response);
        }
            </code>
        </pre>
        </div>

        <span class="anchor" id="GritterMessage"></span>
        <h3><?= $this->translate('GritterMessage') ?></h3>
        <p><?= sprintf($this->translate("To notify the user about a short info WasabiLib includes %sGritter for jQuery%s. Gritter displays a growl-like notification which can be filled with a title and a short message as content. Furthermore one can set an image and the time till the notification will disappear. Note: Every Gritter message can be closed by pushing the close button in the upper right corner. A fully explanation about the capacities of Gritter can be found on the website given before."), '<a href="http://www.boedesign.com/">', '</a>')?></p>
        <p><?= sprintf($this->translate("In the WasabiLib the Gritter is composed of two components. The first is the JavaScript code from jboesch extended to use %sFont Awesome%s to display icons within a notification easily. The second is a PHP class called GritterMessage to generate a short info and display it to the user in a standardized and easy way. Furthermore the GritterMessage is available over a factory service named \"MessageFactory\" right within a ZF2 controller. Below one can see two examples how to send the user Gritter messages."), '<a href="http://fortawesome.github.io/Font-Awesome/">', '</a>')?></p>

        <div class="highlight"><pre>
        <code class="language-php">
    public function shortSimpleAction() {
        $shortMessage = $this->getServiceLocator()->get("MessageFactory")->shortMessage();
        $shortMessage->setTitle("This is a simple message with text only.");
        $shortMessage->setText("Simple Notification");

        $response = new Response();
        $response->add($shortMessage);
        return $this->getResponse()->setContent($response);
    }
        </code>
    </pre></div>

        <div class="highlight"><pre>
        <code class="language-php">
    public function shortFAAction() {
        $shortMessage = $this->getServiceLocator()->get("MessageFactory")->shortMessage();
        $shortMessage->setTitle("This is a message with a Font Awesome Icon.");
        $shortMessage->setText("Notification with FA");
        $shortMessage->setIcon("envelope");

        $response = new Response();
        $response->add($shortMessage);
        return $this->getResponse()->setContent($response);
    }
        </code>
    </pre></div>

        <span class="anchor" id="TriggerEventManager"></span>
        <h3><?= sprintf($this->translate("TriggerEventManager"))?></h3>
        <p><?= sprintf($this->translate("One can also trigger JavaScript events from within the php code. For that purpose the class <i>TriggerEventManager</i> exists. To use this class one has to set the selector of the element where the JS event was registered. The second optional parameter defines the event type e.g. click or focus, where click is the default event type. A short example how to use this class is given below."))?></p>

        <div class="highlight">
        <pre>
            <code class="language-php">
        public function triggerAction() {
            $trigger =
                new TriggerEventManager("#elemId");

            $response = new Response();
            $response->add($trigger);

            return $this->getResponse()->setContent($response);
        }
            </code>
        </pre>
        </div>

        <span class="anchor" id="Redirect"></span>
        <h3><?= sprintf($this->translate("Redirect"))?></h3>
        <p><?= sprintf($this->translate("To handle AJAX request in a very flexible way, the WasabiLib provides a mechanism to redirect to a webpage although a AJAX request has been executed. To redirect to another webpage during an AJAX request the developer use the <i>Redirect</i> class and passes the new location as parameter. Below is an example how to use this class."))?></p>

        <div class="highlight">
        <pre>
            <code class="language-php">
        public function redirectAction() {
            $redirect = new Redirect("http://wasabilibdevportal.dev/application/pages/gettingStarted");

            $response = new Response();
            $response->add($redirect);

            return $this->getResponse()->setContent($response);
        }
            </code>
        </pre>
        </div>

        <span class="anchor" id="modal_windows"></span>
        <h3><?= $this->translate('Modal Windows') ?></h3>
        <p><?= sprintf($this->translate("Modal windows sliding in as an overlay over the normal website. In WasabiLib the modal windows are powered by %sModal%s from %sBootstrap%s. Therefor one can use all feature of a Bootstrap Modal window. There are three modal window types built within the WasabiLib and one can configure them right within the PHP code. In the WasabiLib the modal window concept consists of two base classes. The WasabiModal class and the WasabiModalView class. The first class is used to configure the appearance of the modal window and the second class takes this WasabiModal object and builds the needed HTML code to be displayed. The WasabiModalView class is derived from the ResponseConfigurator and uses an <i>InnerHtml</i> and the ZF2 <i>ViewModel</i> classes to organize and render the needed view components. For more informations about Bootstrap Modal windows take a look at %sgetbootstrap.com/javascript/#modals%s. Below one can check out how to use a modal window."), '<a href="http://getbootstrap.com/javascript/#modals">', '</a>', '<a href="http://getbootstrap.com/javascript/">', '</a>', '<a href="http://getbootstrap.com/javascript/#modals">', '</a>')?></p>
        <p><?= sprintf($this->translate("All elements within the different sections are optional. The developer can decide whether the modal windows owns a title or a close button or not. But for the different standard window types exists a changeable default behaviour."))?></p>
        <p><?= sprintf($this->translate("The WasabiLib modal window is template based and uses the template engine of the ZF2. In the following one can see the structure of the default template, but one can use a completely different template to adapt the modal windows to another environment."))?></p>

    <pre>
        &lt;div class="modal wasabiModal &lt;?= $this-&gt;classes ?&gt;" &lt;?= $this-&gt;inlineConfig ?&gt;&gt;
            &lt;div class="modal-dialog &lt;?= $this-&gt;size ?&gt;"&gt;
                &lt;div class="modal-content"&gt;
                    &lt;div class="modal-header"&gt;
                        &lt;?= $this-&gt;closeButton ?&gt;
                        &lt;h4 class="modal-title"&gt;&lt;?= $this-&gt;title ?&gt;&lt;/h4&gt;
                    &lt;/div&gt;
                    &lt;div class="modal-body"&gt;
                        &lt;?= $this-&gt;content ?&gt;
                    &lt;/div&gt;
                    &lt;div class="modal-footer clearfix"&gt;
                        &lt;div class="buttons-wrap"&gt;
                            &lt;?= $this-&gt;buttons ?&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;&lt;!-- /.modal-content --&gt;
            &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;
        &lt;/div&gt;&lt;!-- /.modal --&gt;
    </pre>

        <p><?= sprintf($this->translate("The sections below show how to use the classes and describes the different possibilities to customize elements like the title or the kind of possible animations of the modal windows."))?></p>

        <span class="anchor" id="Default_modal_window_types"></span>
        <h3><?= sprintf($this->translate("Default modal window types"))?></h3>

        <p><?= sprintf($this->translate("To set up a modal window, regardless of the chosen type, one has to initialize a configuration class first. Here one can configure all possible options defined for %sBootstrap Modal Windows%s. But the pre-configured classes mentioned below let the user choose the title, the content, the kind of used animation, an optional icon or needed buttons easily. The second object must be populated with this configured object, an selector of the html element to put the generated content in and a view renderer to render the used template. To illustrate the usage of the modal window concept the examples below presume methods implemented in an unnamed ZF2 controller."), '<a href="http://getbootstrap.com/javascript/#modals">', '</a>')?></p>

        <h4 id="Info"><?= sprintf($this->translate("Info"))?></h4>
        <p><?= sprintf($this->translate("An Info modal window is the most simplest kind of pre-configured modal windows and it is made for displaying a short informational text (one to three sentences) to the user. It contains a title in the header section, a content (usually text) in the body section and an 'OK'-button in the footer section. The Info modal window does not contain a close button and it cannot be closed by clicking on the outside area of the info modal view. To set up the info modal one initializes a Info class and populates it with the title first followed by the informational text."))?></p>

        <div class="highlight"><pre>
        <code class="language-php">
    public function infoAction() {
        $response = new Response();

        $info = new Info("Info", "Your settings has been saved successfully.");
        $renderer = $this->getServiceLocator()->get("ViewRenderer");
        $modal = new WasabiModalView("#wasabi_modal", $renderer, $info);

        $response->add($modal);

        return $this->getResponse()->setContent($response);
    }
        </code></pre></div>

        <h4 id="Dialog"><?= sprintf($this->translate("Dialog"))?></h4>
        <p><?= sprintf($this->translate("A Dialog modal window is made for displaying a question to the user and receive an answer. Therefor it contains as default a title in the header section, a content in the body consisting of a text and an optional small icon powered by %sFont Awesome%s and two buttons (accept and decline) in the footer section of the modal view to receive the answer. Because of the intention to receive a yes/no answer from the user, the dialog window cannot be closed by clicking on the outside area of the window or on a close button."), '<a href="http://fortawesome.github.io/Font-Awesome/">', '</a>')?></p>

        <div class="highlight"><pre>
        <code class="language-php">
    public function dialogAction() {
        $response = new Response();

        $dialog = new Dialog("Dialog", "Do you really want to abort this action?", Dialog::TYPE_SUCCESS);
        $renderer = $this->getServiceLocator()->get("ViewRenderer");
        $modal = new WasabiModalView("#wasabi_modal", $renderer, $dialog);

        $response->add($modal);

        return $this->getResponse()->setContent($response);
    }
        </code></pre></div>

        <h4 id="Standard"><?= sprintf($this->translate("Standard"))?></h4>
        <p><?= sprintf($this->translate("The Standard modal window is the most flexible built-in modal view of the WasabiLib. It is made to display any content one can think of to show it to the user. It contains a title and a close button in the header section, a text or a ZF2 ViewModel in the content section and a variable number of buttons in the footer section. Also as default the user can close the modal view by clicking the close button or the outside area of the Standard modal view."))?></p>

        <div class="highlight"><pre>
        <code class="language-php">
    public function standardAction() {
        $response = new Response();

        $standard = new WasabiModal("Standard");
        $viewModel = new ViewModel();
        $viewModel->setTemplate("read-me/read-me/standardModalExample.phtml");
        $modal->setContent($viewModel);
        $renderer = $this->getServiceLocator()->get("ViewRenderer");
        $modal = new WasabiModalView("#wasabi_modal", $renderer, $standard);

        $button = new Button($this->translator()->translate('More Info');
        $button->setAction("readme/standardModalInfo", false);

        $standard->addButton($button);

        $ajaxButton = new Button($this->translator()->translate('More Info (with Ajax)');
        $ajaxButton->setAction("readme/standardModalWithAjaxInfo");

        $standard->addButton($ajaxButton);

        $response->add($modal);

        return $this->getResponse()->setContent($response);
    }
        </code></pre></div>

        <span class="anchor" id="sections_wasabi_modal_windows"></span>
        <h3><?= sprintf($this->translate("Sections of a Wasabi modal window"))?></h3>
        <p><?= sprintf($this->translate("All modal windows contain three sections to display content."))?></p>
        <ul>
            <li><?= sprintf($this->translate("The header section with the title and a close button."))?></li>
            <li><?= sprintf($this->translate("The body section with the content (normal text or a ZF2 ViewModel)."))?></li>
            <li><?= sprintf($this->translate("The footer section with any number buttons."))?></li>
        </ul>
        <h4><?= sprintf($this->translate("Header section"))?></h4>
        <p><?= sprintf($this->translate("In the header section one can specify a title and a close button. The constructors of all default modal windows allow to set the title and/or the content of the modal window. More about the content one can find in the %scontent section%s. Below there are examples how to set these values."), '<a href="#Content_section">', '</a>')?></p>
        <div class="highlight"><pre>
        <code class="language-php">
            // Set title
            $standard = new WasabiModal("Standard");
            // or
            $standard = new WasabiModal();
            $standard->setTitle("Standard");
        </code>
    </pre></div>

        <div class="highlight"><pre>
        <code class="language-php">
            // Use the default close button.
            $standard = new WasabiModal("Standard");
            // Enable close button if default is disabled
            $standard->setCloseButton(true);

            // Disable close button if default is enabled
            $standard->setCloseButton(false);

            // Set your own customized close button
            $button = new Button("Close");
            $button->setTemplate("path/to/close/button/template"); // or use the default button template
            $button->isDismissButton();
            $button->addClass("class_close_button");

            $standard->setCloseButton($button);
        </code>
    </pre></div>
        <p><?= sprintf($this->translate("One can close an open modal window in several ways. The first way is to use the close button. The modal windows posses a preconfigured close button, but one can use a template with a customized close button. The example below shows the kind of usage. Note: The close button of the used WasabiModal class has activated close button by default."))?><p>
        <div class="highlight"><pre>
        <code class="language-php">
            $standard = new WasabiModal("Standard", "Content of the standard modal window.");

            // Disable the close button
            $standard->setCloseButton(false);

            // Enable a disabled close button, e.g. Dialog and Info classes.
            $standard->setCloseButton(true);

            // Use a customized close button
            $closeButton = new Button();
            $closeButton->setTemplate("path/to/customized/close/button/template");
            $closeButton->isDismissButton();

            $standard->setCloseButton($closeButton);
        </code>
    </pre></div>

        <p><?= sprintf($this->translate("The second way is to use a normal button to close the modal window, e.g. after finishing a task displayed within a modal window. An example is shown below."))?><p>
        <div class="highlight"><pre>
        <code class="language-php">
    $standard = new WasabiModal("Standard", "Content of the standard modal window.");

    // Use a customized close button
    $button = new Button("finish");
    $button->setAction("routeTo/finishAction");
    $button->isDismissButton();

    $standard->addButton($closeButton);
        </code>
    </pre></div>

        <p><?= sprintf($this->translate("The third way to close a modal window is to click on the outside of the modal window. An example how to enable/disable this feature is shown below. Note: This feature is activated by default in the used WasabiModal class."))?></p>

        <div class="highlight"><pre>
        <code class="language-php">
    $standard = new WasabiModal("Standard", "Content of the standard modal window.");

    // Enable the backdrop feature
    $standard->->setBackdrop(WasabiModal::STATIC_CONST);

    // Disable the backdrop feature
    $standard->->setBackdrop(false);
        </code>
    </pre></div>

        <span class="anchor" id="Content_section"></span>
        <h4><?= sprintf($this->translate("Content section"))?></h4>
        <p><?= sprintf($this->translate("In the content section one can add a content to the modal window. This can be a text/string or a ZF2 ViewModal. An example how to do this can be seen below."))?></p>
        <div class="highlight"><pre>
        <code class="language-php">
    // Set title and content (string) via the constructor
    $standard = new WasabiModal("Standard", "Content of the standard modal window.");

    // use the setContent method
    $standard = new WasabiModal("Standard");

    // use a ViewModel object
    $viewModel = new ViewModel();
    $viewModel->setTemplate("path/to/yourtemplate.phtml");
    $standard->setContent($viewModel);

    // Set a simple text
    $standard->setContent("A simple text to show up in the content area of my Standard modal view.");
        </code>
    </pre></div>

        <h4 id="Footer_section"><?= sprintf($this->translate("Footer section"))?></h4>
        <p><?= sprintf($this->translate("In the footer section one can place any number of buttons. How to configure these buttons in detail is shown in the section <i>Buttons</i>."))?></p>
        <div class="highlight"><pre>
        <code class="language-php">
    $standard = new WasabiModal("Standard");

    // Build two buttons
    $okButton = new Button("OK");
    $abortButton = new Button("Abort");

    // Add them to the modal window.
    $standard->addButton($okButton);
    $standard->addButton($abortButton);
        </code>
    </pre></div>

        <span class="anchor" id="customize_wasabi_modal_windows"></span>
        <h3><?= sprintf($this->translate("Customize a Wasabi modal window"))?></h3>
        <p><?= sprintf($this->translate("Modal window included in the WasabiLib can be customized in several ways. How to customize the behaviour and the appearance of a modal window is described in the sections below."))?><p>
        <h4 id="ClassSize"><?= sprintf($this->translate("Class and Size"))?></h4>
        <p><?= sprintf($this->translate("To change the appearance of a modal view one can add CSS classes to the view. Therefor one use the addClass-method. To resize the modal window use the setSize-method. There exists three preconfigured sizes adapted from the bootstrap modal window. For normal size one does not use a explicit setting because it is the default size. For small and large sizes one uses the parameter modal-sm or modal-lg. The values of setSize and the usage of addClass is shown below."))?><p>
        <div class="highlight"><pre>
        <code class="language-php">
    $standard = new WasabiModal("Standard", "Content of the standard modal window.");

    // Add a new class to existing ones
    $standard->addClass("my_own_css_class");

    // Set the size of the window.
    // small
    $standard->setSize("modal-sm");
    // large
    $standard->setSize("modal-lg");
        </code>
    </pre></div>

        <h4 id="Animations"><?= sprintf($this->translate("Animations"))?></h4>
        <p><?= sprintf($this->translate("If the modal window is showing up on the client side it appears in a smooth way. The default behavior is that it fades in bottom down. But several other ways are possible and can be realized as css animation. The example below shows how to de-/activate the animation of appearance and disappearance. Note: The default animation is fading in and out in 0.3 seconds."))?></p>
        <div class="highlight"><pre>
        <code class="language-php">
    $standard = new WasabiModal("Standard", "Content of the standard modal window.");

    // Deactivate fade in/out feature
    $standard->setAnimationType(false);

    // Activate a deactivated fade in/out feature
    $standard->setAnimationType("fade");

    // Use a customized fade in/out feature, e.g. fast-fade defined in a corresponding css file
    $standard->setAnimationType("fast-fade");
        </code>
    </pre></div>

        <h4 id="Buttons"><?= sprintf($this->translate("Buttons"))?></h4>
        <p><?= sprintf($this->translate("A button for WasabiLib modal windows are configuration objects like the Dialog, Info and WasabiModal classes itself. One can give a button a value displayed on the button, an Ajax action or a normal href to redirect to another location. An example how to create a button can be seen below."))?></p>
        <div class="highlight"><pre>
        <code class="language-php">
    // Init a button with a button text.
    $button = new Button("Push");

    // Init a button without a button text and set the button text later.
    $button = new Button();
    $button->setButtonText("Push");

    // or set a ViewModel as button text to customize the appearance
    $viewModel = new ViewModel(array("content" => "Push"));
    $viewModel->setTemplate("path/to/button/text/template");
    $button->setButtonText($viewModel);

    // set an action to the button (default onClick)
    $button->setAction("path/to/action");
        </code></pre></div>

        <span class="anchor" id="wizard"></span>
        <h3><?= $this->translate('Wizard') ?></h3>
        <p><?= sprintf($this->translate("A wizard for e.g. registration processes is also part of the WasabiLib. This Wizard allows a developer to develop a registration or configuration process encapsulated in a closure based infrastructure. This approach has the advantage that a developer can focus on the implementation of the individual steps of a process rather than on how they are processed. Th e Wizard concept consists of six classes. The <i>Wizard</i> (as maincontroller of the wizard), the <i>StepController</i> (which holds the logic for one step), the <i>StepCollection</i> (the collection of all steps), the <i>ArrayIterator</i> (to iterate over steps within the step collection), the class <i>ClosureArguments</i> (which provides the ZF2 request object and the service locator) and the <i>StorageContainer</i> class (to store the collected inforamtions)."))?></p>
        <p><?= sprintf($this->translate("To implement a wizard process the following steps must be implemented."))?></p>
        <ol>
            <li><?= sprintf($this->translate("Design one template for every step with a form as shown below."))?>
            <div class="highlight">
        <pre>
            <code class="language-php">
&ltform id="&lt?=$this-&gtformName?&gt" name="&lt?=$this-&gtformName?&gt" method="post" action="route/to/action"&gt
    ...
    &lt?=$this->wizardFormCurrentStep?&gt
    ...
&lt/form&gt
            </code>
        </pre>
            </div></li>

            <li><?= sprintf($this->translate("Implement ZF2 Form subclasses for every step and the corresponding ZF2 Validator classes. Note: To use common services like the translator service one can use the WasabiLib <i>FormExtended</i> class."))?></li>
            <li><?= sprintf($this->translate("Implement one method for every step. Within this methods one has to implement the process logic for one step. This includes the initialization of a <i>StepController</i> with appropriate init and process closures. After the implementation of all step functions implement a step collection closure. An example of a step function and the corresponding collection closure is illustrated below. Note: The wizard of the WasasbiLib requires a last step to overview the informations entered before."))?>
                <div class="highlight">
        <pre>
            <code class="language-php">
    private function stepOneFunction() {
        $stepOne = new \WasabiLib\Wizard\StepController("Name", "Name");
        $stepOne->setInitClosure(function (\WasabiLib\Wizard\ClosureArguments $closureArguments) {
            $this->form = new StepOneForm("stepOneForm", $closureArguments->getServiceLocator());
        });
        $stepOne->setProcessClosure(function (\WasabiLib\Wizard\ClosureArguments $closureArguments) {
            $request = $closureArguments->getRequest();
            $serviceLocator = $closureArguments->getServiceLocator();

            if ($request->isPost()) {
                $formValidator = new StepOneFormValidator();
                $this->form->setInputFilter($formValidator->getInputFilter());
                $this->form->setData($request->getPost());

                if ($this->form->isValid()) {
                    $this->setStorageValue($this->form->getData());
                    return true;
                }

            }
            return false;
            });
        $viewModel = new ViewModel();
        $viewModel->setTemplate("route/to/stepone.phtml");
        $stepOne->setFormAction("route/to/formAction");
        $stepOne->setViewModel($viewModel);

        return $stepOne;
    }

    // step collection closure
    private function stepCollectionClosure() {
        $stepCollectionClosure = function () {
            $stepCollection = new StepCollection();
            $stepCollection->add($this->stepOneFunction());
            $stepCollection->add($this->stepTwoFunction());
                ...
            $stepCollection->add($this->lastStepFunction());

            return $stepCollection;
        };
        return $stepCollectionClosure;
    }
            </code>
        </pre>
                </div></li>
        </ol>
        <div class="bs-example">
            <p><?= sprintf($this->translate("Wizard Example"))?></p>
            <div id="wizard_modal"><?=$this->content?></div>
            <div class="highlight" style="min-height: 40px">
                <button id="btnWizard" class="ajax_element" data-href="wizard">Wizard Example</button>
            </div>
        </div>
        <div class="highlight">
        <pre>
            <code class="language-php">
                <form id="<?=$this->formName?>" name="<?=$this->formName?>" method="post" action="route/to/action" ... >
                    ...
                    <?=$this->wizardFormCurrentStep?>
                    ...
                </form>
            </code>
        </pre>
        </div>

        <h1><?= $this->translate('Appendix') ?></h1>
        <p><?= sprintf($this->translate("In the appendix we describe several classes which are shortcuts for the shown classes above. Two shortcuts are already described above. E.g. the Gritter class is one of these shortcuts and simplifies the usage of the GenericMessage class if one wants to use a notification powered by Gritter. The second example is the modal window powered by Twitter Bootstrap."))?></p>

        </div>
        <!-- Navigation -->

        </div>


        </div>

        <span class="anchor" id="dependencies"></span>
      <h2>Dependencies</h2>

             <p>
                <?= sprintf($this->translate("The WasabiLib depends on several external libraries. First the most of JavaScript functionality including the Ajax mechanism depends on the %sjQuery%s library in the Version 2.1.3, the modal windows and the appearance of e.g. the Wizard are powered by %sbootstrap%s in version 3.3.4. The short message approach uses %sGritter for jQuery%s in version 1.7.4. and the described %sFont Awesome%s icons are used in version 4.3.0."), '<a href="http://getbootstrap.com/">', '</a>', '<a href="https://jquery.com/">', '</a>', '<a href="https://github.com/jboesch/Gritter">', '</a>', '<a href="http://fortawesome.github.io/Font-Awesome/">', '</a>')?>
             </p>

        <span class="anchor" id="how-to-extend"></span>
        </p>
        <h2>How to extend WasabiLib Module</h2>
        <?= sprintf($this->translate("To extend the Ajax functionality of the WasabiLib one has to do a few steps only. Assume one wants to extend the WasabiLib with the functionality to show an alert window. The needed steps are described below."))?>
        <?= sprintf($this->translate("In the first one has to implement a new PHP class. Here we call it <i>Alert</i>. The only thing to do is to implement a subclass of <i>GenericMessage</i>, reimplement the constructor and fill in the parent constructor with the right parameters. In this example the <i>selector</i> is set to null to indicate that we want to adress the window object. The parameters <i>eventType</i> and <i>eventId</i> can be choosen by the developer, but here we decided to use the strings 'Alert' for the <i>eventType</i> and 'alert' for the <i>eventId</i>. The last parameter for the parent constructor is an array of alle needed parameters. In our case this is just the alert message."))?>
        <div class="highlight"><pre>
        <code class="language-php">
    class Alert extends GenericMessage{
        public function __construct($alertMessage){
            parent::__construct(null, "alert", "Alert", [$alertMessage]);
        }
    }
        </code>
    </pre></div>
        <?= sprintf($this->translate("During the next step one has to implement the so called recipient for the JS side. For this example we implement the JavaScript class <i>Alert</i> and reimplement the <i>update(responseType)</i> method. The constructor of the class needs a parameter for the <i>ExecuteRemoteProcedureCallManager</i> so that the JS <i>alert</i> method can be performed. In the <i>update</i> method we call the <i>execute(selector, methodName, params)</i> of the <i>ExecuteRemoteProcedureCallManager</i>. Here we obtain the message object from the object responseType and since we have the <i>selector</i> parameter set to <i>null</i>, we set the <i>selector</i> parameter for the <i>execute</i> method call to undefined. The paremters <i>methodName</i> and <i>params</i> can be set from the <i>message</i> object."))?>
        <div class="highlight"><pre>
        <code class="language-php">
    function Alert(executeRemoteProcedureCallManager){
        var _self = this;

        _self.execRPCManager = executeRemoteProcedureCallManager;
        _self.ACTION_TYPE_JS_ALERT = "alert";
    }

    Alert.prototype.update = function(responseType){
        var _self = this;
        var message = responseType.message;

        _self.execRPCManager.execute(undefined, message.actionType, message.params);
    };
        </code>
    </pre></div>

        <?= sprintf($this->translate("For the last step we have to register the new method right within the <i>ExecuteRemoteProcedureCallManager</i> and the new JS class at the <i>WasabiNotificationCenter</i> so that no unregistered method can be called remotely. To do that we add the method name to the <i>possibleMethods</i> object set with the <i>ExecuteRemoteProcedureCallManager</i> method <i>setPossibleMethods(possibleMethods)</i> and register the <i>Alert</i> class by calling the <i>register(event, id, observer)</i> method of the <i>WasabiNotificationCenter</i>. An example of this implemented <i>Alert</i> class can be found on the %sexamples%s site."), '<a href="/application/pages/examples">', '</a>')?>
        <div class="highlight"><pre>
        <code class="language-php">
    // config.js
    ...
    websiteManager.getWasabiNotificationCenter().register("alert", "Alert"
                            , new Alert(executeRemoteProcedureCallManager));
    ...

    ...
    executeRemoteProcedureCallManager.setPossibleMethods({
        ACTION_TYPE_SHOW: "show"
        , ACTION_TYPE_HIDE: "hide"
        , ACTION_TYPE_MODAL: "modal"
        , ACTION_TYPE_SLIDEDOWN: "slideDown"
        , ACTION_TYPE_SLIDEUP: "slideUp"
        , ACTION_TYPE_REPLACE: "html"
        , ACTION_TYPE_APPEND: "append"
        , ACTION_TYPE_REMOVE: "empty"
        , ACTION_TYPE_CSS: "css"
        , ACTION_TYPE_FADEOUT: "fadeOut"
        , ACTION_TYPE_FADEIN: "fadeIn"
        , ACTION_TYPE_ATTR: "attr"
        , ACTION_TYPE_ADD_CLASS: "addClass"
        , ACTION_TYPE_REMOVE_CLASS: "removeClass"
        , ACTION_TYPE_TOGGLE_CLASS: "toggleClass"
        , ACTION_TYPE_HREF: "href"
        , ACTION_TYPE_TRIGGER: "trigger"
        , ACTION_TYPE_REMOVE_ELEMENT : "remove"
        , ACTION_TYPE_JS_ALERT : "alert"
    });
    ...
        </code>
    </pre></div>
        <p>


        <span class="anchor" id="additional"></span>
        <h2>Other Modules</h2>

        <p>

        </p>

        <span class="anchor" id="mail"></span>
        <h3>Mail Module</h3>
        <?= $this->translate("The Mail Module is pre-configured as a service that can be retrieved by calling the service locator.") ?>
        <div class="highlight"><pre>
        <code class="language-php">
            $body = new ViewModel();
            $body->setTemplate("responsive.phtml");

            $mail = $this->getServiceLocator()->get("Mail");
            $mail->setSubject("My Subject");
            $mail->setTo("recipient@address.com");
            $mail->setBody("My Message" || $body);
            $mail->send();
        </code>
         </pre>
            </div>
        <?= $this->translate("One must set the server and the environment within the config.php of the module.") ?>
        <div class="highlight"><pre>
        <code class="language-php">
        "env" => array(
            "type" => "local"
            //"type" => "develop"
            //"type" => "production"
        ),

        "WasabiMail" => array(
            "transporter" => array(
            /**
            * local configuration to save mails as text
            */
            "local" => array(
            "base" => __DIR__,
            "target" => "/localMails/"),

            /**
            * you have a staging or development system with access to a mail server
            */
            "develop" => array(
                "port" => 25,
                "to" => "development@yourdomain.de",
                "name" => "mail.yourmailserver.local",
                "host" =>"mail.yourmailserver.local"),
            ),
        ),
        </code></pre></div>
        <?= $this->translate("One can define three types of environment. Local, develop and production.") ?>

        <ul>
            <li>
                <?=$this->translate("Local: To Use on a local system. The Messages will be saved within the folder localMails in the module folder.") ?>
            </li>
            <li>
                <?=$this->translate("Develop: One can configure a local or global Email server. It is recommended to use a pre-defined to:address for testing.") ?>
            </li>
            <li>
                <?=$this->translate("Production: In production mode Sendmail is used. This can be changed in the Module.php only.") ?>
            </li>
        </ul>
    </div>

    <div class="col-md-3" role="complementary">
        <nav class="wasabilib-sidebar hidden-print hidden-xs hidden-sm" data-spy="affix" data-offset-top="20">
            <ul class="nav wasabilib-sidenav">
                <li>
                    <a href="#what-is-included">What is included</a>
                    <ul class="nav wasabilib-sidenav">
                        <li><a href="#ajax">AJAX</a></li>
                        <li><a href="#ResponseTypeResponseConfigurator">ResponseType and ResponseConfigurator</a></li>
                        <li><a href="#genericMessage">Generic Message</a></li>
                        <li><a href="#response">Response</a></li>
                        <li><a href="#InnerHtml">InnerHtml</a></li>
                        <li><a href="#DomManipulator">DomManipulator</a></li>
                        <li><a href="#GritterMessage">GritterMessage</a></li>
                        <li><a href="#TriggerEventManager">TriggerEventManager</a></li>
                        <li><a href="#modal_windows">Modal Windows</a></li>
                        <li><a href="#Default_modal_window_types">Default modal window types</a></li>
                        <li><a href="#sections_wasabi_modal_windows">Sections of a Wasabi modal window</a></li>
                        <li><a href="#customize_wasabi_modal_windows">Customize a Wasabi modal window</a></li>
                        <li><a href="#wizard">Wizard</a></li>
                    </ul>
                </li>
                <li>
                    <a href="#dependencies">Dependencies</a>
                </li>
                <li>
                    <a href="#how-to-extend">How to extend WasabiLib Module</a>
                </li>
                <li>
                    <a href="#additional">Other Modules</a>
                </li>
                <ul class="nav">
                    <li>
                        <a href="#mail">Mail Module</a>
                    </li>
                </ul>
            </ul>
            <a class="back-to-top" href="#top">
                Back to top
            </a>

        </nav>
    </div>
</div>
</div>
